// Greddy Algo

const startingTime = [ 1, 3, 0, 5, 8, 5 ];
const finishTime = [ 2, 4, 6, 7, 9, 9 ];
const noOfMeeetings = startingTime.length;

const maxMeeting = (s, f, n) => {
    let collectiveArray = []
    // push data like [[index, startingTime, finishTime]]
    for(let i = 0; i<s.length; i++) {
        let newArray = []
        newArray.push(i+1);
        newArray.push(s[i]);
        newArray.push(f[i])
        collectiveArray.push(newArray)
    }
    
    // sort based on finish time
    collectiveArray.sort((a,b) => a[2] - b[2])
    let endTime = collectiveArray[0][2]
    let result = []
    result.push(collectiveArray[0][0])
    for(let j = 1; j<collectiveArray.length; j++) {
        let startTime = collectiveArray[j][1]
        if (startTime > endTime) {
            result.push(collectiveArray[j][0])
            endTime = collectiveArray[j][2]
        }
    }
    console.log(result)
}

maxMeeting(startingTime, finishTime, noOfMeeetings)

// time complexity: O(N log N)
// space complexity: O(N)
