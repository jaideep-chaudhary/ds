let s = "aab"
let result = []

const palindromePartining = (i, s, slate) => {
    // base case
    
    if (i === s.length) {
        result.push(slate.slice())
        return
    }
    
    // recursive case
    
    for(let j = i; j < s.length; j++) {
        
        if (isPalindrome(s, i, j)) {
            slate.push(s.slice(i, j+1))
            palindromePartining(j+1, s, slate)
            slate.pop()
        }
    }
    
}

const isPalindrome = (s, start, end) => {
    while(start < end) {
        if (s[start] !== s[end]) {
            return false
        }
        start++;
        end--;
    }
    return true
}

palindromePartining(0, s, [])
console.log(result)

// Time Complexity: O( (2^n) *k*(n/2) )
// Space Complexity: O(k * x) 
