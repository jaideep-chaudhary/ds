class Queue {
  constructor() {
    this.start = -1;
    this.end = -1;
    this.currSize = 0;
    this.maxSize = 16;
    this.arr = Array(this.maxSize).fill(0);
  }

  push(newElement) {
    if (this.currSize === this.maxSize) {
      console.log("Queue is full\nExiting...");
      process.exit(1);
    }
    if (this.end === -1) { // first insertion 
      this.start = 0;
      this.end = 0;
    } else {
      this.end = (this.end + 1) % this.maxSize;
    }
    this.arr[this.end] = newElement;
    console.log("The element pushed is", newElement);
    this.currSize += 1;
  }

  pop() {
    if (this.start === -1) {
      console.log("Queue Empty\nExiting...");
    }
    const popped = this.arr[this.start];
    if (this.currSize === 1) { // first deletion 
      this.start = -1;
      this.end = -1;
    } else {
      this.start = (this.start + 1) % this.maxSize;
    }
    this.currSize -= 1;
    return popped;
  }

  top() {
    if (this.start === -1) {
      console.log("Queue is Empty");
      process.exit(1);
    }
    return this.arr[this.start];
  }

  size() {
    return this.currSize;
  }
}

const q = new Queue();
q.push(4);
q.push(14);
q.push(24);
q.push(34);
console.log("The peek of the queue before deleting any element", q.top());
console.log("The size of the queue before deletion", q.size());
console.log("The first element to be deleted", q.pop());
console.log("The peek of the queue after deleting an element", q.top());
console.log("The size of the queue after deleting an element", q.size());
